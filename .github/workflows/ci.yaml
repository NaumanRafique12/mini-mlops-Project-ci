name: CI Pipeline
on: push
jobs:
  testing_ci:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    - name: Install dependencies
      run: |
        pip install -r requirements.txt

    - name: Run code
      run: |
        dvc repro
    - name: Configure AWS Credentials
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        dvc push
    - name: Testing Latested Version Staging Model
      run: |
        python -m unittest tests/test_model.py

    - name: Promote model to production
      if: success()
      run: python scripts/promote_model.py

    
    - name: Login to AWS ECR
      env:
        AWS_REGION: us-west-1
        AWS_ECR_REGISTRY: 314650839790.dkr.ecr.us-west-1.amazonaws.com
      run: |
        aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
    - name: Build Docker image
      run: |
        docker build -t ecr-docker .
    - name: Tag Docker image
      run: |
        docker tag ecr-docker:latest 314650839790.dkr.ecr.us-west-1.amazonaws.com/ecr-docker:latest
    - name: Push Docker image to AWS ECR
      run: |
        docker push 314650839790.dkr.ecr.us-west-1.amazonaws.com/ecr-docker:latest

    - name: Deploy to EC2
      if: success()
      uses: appleboy/ssh-action@v0.1.5
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USER }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set default.region us-west-1
          aws ecr get-login-password --region us-west-1 | docker login --username AWS --password-stdin 314650839790.dkr.ecr.us-west-1.amazonaws.com
          docker pull 314650839790.dkr.ecr.us-west-1.amazonaws.com/ecr-docker:latest
          docker stop my-app || true
          docker rm my-app || true
          docker run -d -p 80:5000 -e DAGSHUB_PAT=${{ secrets.DAGSHUB_PAT }} --name ecr-docker 314650839790.dkr.ecr.us-west-1.amazonaws.com/ecr-docker:latest

    # - name: Log in to Docker Hub
    #   if: success()
    #   uses: docker/login-action@v2
    #   with:
    #     username: ${{ secrets.DOCKER_USER_NAME }}
    #     password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    # - name: Build Docker image
    #   if: success()
    #   run: |
    #     docker build -t ${{ secrets.DOCKER_USER_NAME }}/emotion:latest .
    # - name: Push Docker image to Docker Hub
    #   if: success()
    #   run: |
    #     docker push ${{ secrets.DOCKER_USER_NAME }}/emotion:latest

    # - name: Deploy to EC2 instance
    #   if: success()
    #   uses: appleboy/ssh-action@v0.1.5
    #   with:
    #     host: ${{ secrets.EC2_HOST }}
    #     username: ${{ secrets.EC2_USER }}
    #     key: ${{secrets.EC2_SSH_KEY}}
    #     script: |
    #       docker pull noman013/emotion:latest
    #       docker stop my-app || true
    #       docker rm my-app || true
    #       docker run -d -p 80:5000 --name my-app -e DAGSHUB_PAT=f3b8958b4ea065923ae434cb9ddc54a5645428c7 noman013/emotion:latest
    #       timeout: 60s
    #       command_timeout: 15m